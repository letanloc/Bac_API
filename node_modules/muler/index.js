#!/usr/bin/env node
var program = require('commander');
var co = require('co');
var prompt = require('prompt');
var bcrypt = require('bcrypt');
var fs = require("fs");
var request = require('request');
var Table = require('cli-table');

var server = " ";
var defaultPort   = "8080"
var apiUrl = "mmc/api/"
var crypto = require('crypto'),
    algorithm = 'aes256',
    key = 'd6F3Efeq';

function fileExists(filePath){
    try
    {
        return fs.statSync(filePath).isFile();
    }
    catch (err)
    {
        return false;
    }
}
function checkForConfigFile(){ 
    if(!fileExists("/tmp/.mule_settings")){throw "Setup not ran atleast once"} 
}
function encrypt(text){
  var cipher = crypto.createCipher(algorithm, key);
  var encrypted = cipher.update(text, 'utf8', 'hex') + cipher.final('hex');
  return encrypted;
}
function decrypt(text){
  var decipher = crypto.createDecipher(algorithm, key);
  var decrypted = decipher.update(text, 'hex', 'utf8') + decipher.final('utf8');
  return decrypted;
}
//Save Username and Password into a file
function mule_config(){
    prompt.start();
    prompt.get([
      {
           name: 'username',
           required: true
      }, 
      {
            name: 'password',
            hidden: true,
            conform: function (value) {
                return true;
            }
      }
    ], 
    function (err, result) {
        username = result.username;
        password =  result.password;
        fs.writeFile("/tmp/.mule_settings", username+":"+encrypt(password), function(err) {
            if(err) {
                return console.log(err);
            }
            console.log("Configuration successful");
        }); 
    });
}
function mule_list_server(servername,port){
    checkForConfigFile()
    if(!port){ port = defaultPort }
    fs.readFile('/tmp/.mule_settings',"utf-8", function(err, data){
          if (err) throw err;
          cred = data.split(":")
          var url = "http://"+cred[0]+":"+decrypt(cred[1])+"@"+servername+":"+port+"/"+apiUrl;
          request(url+'servers', function (error, response, body) {
              if (!error && response.statusCode == 200) {
                    var serverObject = JSON.parse(body);
                    serverObject.data.forEach(function(s){
                        console.log("___________________Server__________________________");
                        console.log("Name\t:"+s.name);
                        console.log("Version\t:"+s.version);
                        console.log("Status\t:"+s.status);
                        console.log("IP Addr\t:"+s.hostIp);
                        console.log("ID\t:"+s.id);
                        console.log("___________________________________________________");
                    });
              }
          });
    });
}
function mule_list_clusters(servername,port){
    checkForConfigFile()
    if(!port){ port = defaultPort }
    fs.readFile('/tmp/.mule_settings',"utf-8", function(err, data){
          if (err) throw err;
          cred = data.split(":")
          var url = "http://"+cred[0]+":"+decrypt(cred[1])+"@"+servername+":"+port+"/"+apiUrl;
          request(url+'clusters', function (error, response, body) {
              if (!error && response.statusCode == 200) {
                    var serverObject = JSON.parse(body);
                    serverObject.data.forEach(function(s){
                        console.log("___________________Server__________________________");
                        console.log("Name\t:"+s.name);
                        console.log("Version\t:"+s.version);
                        console.log("Status\t:"+s.status);
                        console.log("Servers\t:"+s.nodeServerIds.join("\n\t "));
                        console.log("ID\t:"+s.id);
                        console.log("___________________________________________________");
                    });
              }
          });
    });
}
function mule_list_cluster_applications(servername,cluster_name,port){
    checkForConfigFile()
    if(!port){ port = defaultPort }
    var clitable = new Table({
        head: ['Name','Staus','Running In']
    });
    fs.readFile('/tmp/.mule_settings',"utf-8", function(err, data){
          if (err) throw err;
          cred = data.split(":")
          var url = "http://"+cred[0]+":"+decrypt(cred[1])+"@"+servername+":"+port+"/"+apiUrl;
          request(url+'clusters/'+cluster_name+'/applications', function (error, response, body) {
              if (!error && response.statusCode == 200) {
                    var serverObject = JSON.parse(body);
                    serverObject.data.forEach(function(s){
                        if(s.status == "STARTED" ){
                            clitable.push([s.name,s.status,s.nodesRunning])
                        }else{
                            clitable.push([s.name,s.status,"N/A"])
                        }
                    });
                  console.log(clitable.toString());
              }
          });
    });
}
function mule_list_cluster_applications_operation_restart(servername,cluster_name,app_name,port){
    checkForConfigFile()
    if(!port){ port = defaultPort }
    
    fs.readFile('/tmp/.mule_settings',"utf-8", function(err, data){
          if (err) throw err;
          cred = data.split(":")
          var url = "http://"+cred[0]+":"+decrypt(cred[1])+"@"+servername+":"+port+"/"+apiUrl;
          request.post(url+'clusters/'+cluster_name+'/applications/'+app_name+'/restart', function (error, response, body) {
              if (!error && response.statusCode == 200) {
                  var clitable = new Table({
                        head: ['Restart Successfull']
                    });
                  console.log(clitable.toString());
              }else{
                  var clitable = new Table({
                    head: ['Restart UnSuccessfull']
                });
                  console.log(clitable.toString());
                  console.dir(error);
              }
          });
    });
}
function mule_list_cluster_applications_operation_start(servername,cluster_name,app_name,port){
    checkForConfigFile()
    if(!port){ port = defaultPort }
    
    fs.readFile('/tmp/.mule_settings',"utf-8", function(err, data){
          if (err) throw err;
          cred = data.split(":")
          var url = "http://"+cred[0]+":"+decrypt(cred[1])+"@"+servername+":"+port+"/"+apiUrl;
          request.post(url+'clusters/'+cluster_name+'/applications/'+app_name+'/start', function (error, response, body) {
              if (!error && response.statusCode == 200) {
                  var clitable = new Table({
                        head: ['Start Successfull']
                    });
                  console.log(clitable.toString());
              }else{
                  var clitable = new Table({
                    head: ['Start UnSuccessfull']
                });
                  console.log(clitable.toString());
                  console.dir(error);
              }
          });
    });
}
function mule_list_cluster_deployment(servername,cluster_name,port){
    checkForConfigFile()
    if(!port){ port = defaultPort }
    fs.readFile('/tmp/.mule_settings',"utf-8", function(err, data){
          if (err) throw err;
          cred = data.split(":")
          var url = "http://"+cred[0]+":"+decrypt(cred[1])+"@"+servername+":"+port+"/"+apiUrl;
          var clitable = new Table({
                head: ['Id','Name','LastModified','Status']
          });
          request(url+'deployments/?cluster='+cluster_name, function (error, response, body) {
              if (!error && response.statusCode == 200) {
                    var serverObject = JSON.parse(body);
                    serverObject.data.forEach(function(s){
                            console.log(s)
                            clitable.push([s.id,s.name,s.lastModified,s.status])
                    });
                    console.log(clitable.toString());
              }
          });
    });
}
function mule_create_app_repo(servername,file_name,port){
    checkForConfigFile()
    if(!port){ port = defaultPort }
    if(!fileExists(file_name)){ throw "File Not found "+file_name }
    d = file_name
    file_name = d.substring(d.lastIndexOf("/")+1,d.length)
    dir_name = d.substring(0,d.lastIndexOf("/"))
    var formData = {
        file: fs.createReadStream(dir_name + '/'+ file_name),
        name: file_name,
        version:"1.2.3"
    };
    fs.readFile('/tmp/.mule_settings',"utf-8", function(err, data){
          if (err) throw err;
          cred = data.split(":")
          var url = "http://"+cred[0]+":"+decrypt(cred[1])+"@"+servername+":"+port+"/"+apiUrl;
          var clitable = new Table({
                head: ['Id','Name','LastModified','Status']
          });
          request.post({url:url+"repository", formData: formData}, function optionalCallback(err, httpResponse, body) {
                  if (err) {
                    return console.error('upload failed:', err);
                  }
                  console.log('Upload successful!  Server responded with:', body);
        });
    });
}
//program
//   .version('0.0.1')
//   .option('-C, --chdir <path>', 'change the working directory')
//   .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')
//   .option('-T, --no-tests', 'ignore test hook')

  program
   .command('setup')
   .description('Init command')
   .action(function() {
        mule_config();
   });

   program
   .command('list-servers <servername> [port]')
   .description('List all the servers in a giver server')
   .action(function(servername,port) {
      mule_list_server(servername,port)
   });
  
    program
       .command('list-clusters <servername> [port]')
       .description('List all the clusters in a giver servername')
       .action(function(servername,port) {
          mule_list_clusters(servername,port)
    });

    program
       .command('list-capps <servername> <cluster_name> [port]')
       .description('List all the apps in a cluster')
       .action(function(servername,cluster_name,port) {
          mule_list_cluster_applications(servername,cluster_name,port)
    });
    
    program
       .command('restart <servername> <cluster_name> <app_name> [port]')
       .description('Restart an application in a given server')
       .action(function(servername,cluster_name,app_name,port) {
          mule_list_cluster_applications_operation_restart(servername,cluster_name,app_name,port)
    });
    
    program
       .command('start <servername> <cluster_name> <app_name> [port]')
       .description('Start an application in a given server')
       .action(function(servername,cluster_name,app_name,port) {
          mule_list_cluster_applications_operation_start(servername,cluster_name,app_name,port)
    });


    program
       .command('list-cdepo <servername> <cluster_name> [port]')
       .description('List all deployments in a cluster')
       .action(function(servername,cluster_name,port) {
          mule_list_cluster_deployment(servername,cluster_name,port)
    });

    program
       .command('create-app <servername> <file_name> [port]')
       .description('Create an application into repository using a file name')
       .action(function(servername,file_name,port) {
          mule_create_app_repo(servername,file_name,port)
    });

// program
//   .command('teardown <dir> [otherDirs...]')
//   .description('run teardown commands')
//   .action(function(dir, otherDirs) {
//     console.log('dir "%s"', dir);
//     if (otherDirs) {
//       otherDirs.forEach(function (oDir) {
//         console.log('dir "%s"', oDir);
//       });
//     }
//   });

// program
//   .command('*')
//   .description('deploy the given env')
//   .action(function(env) {
//     console.log('deploying "%s"', env);
//   });

 program.parse(process.argv);